---
import { frameworks } from '../../data/navigation';

const currentPath = Astro.url.pathname;
const isActivePath = (path: string) => {
    const normalizedCurrent = currentPath.replace(/\/+$/, '').toLowerCase();
    const normalizedPath = path.replace(/\/+$/, '').toLowerCase();
    return path === '/' 
        ? (normalizedCurrent === '' || normalizedCurrent === '/') 
        : normalizedCurrent.endsWith(normalizedPath);
};
---

<header class="top-0 left-0 right-0 z-50">
    <nav class="container mx-auto px-4 py-6">
        {/* Desktop Navigation */}
        <div class="hidden lg:grid grid-cols-[1fr_auto_1fr] items-center">
            <div class="flex items-center gap-4">
                <img 
                    src="https://public.easternshoreit.com/esit.png"
                    alt="Eastern Shore IT Services Logo"
                    class="h-[40px] w-auto object-contain"
                    width="40"
                    height="40"
                />
                <a href="tel:+12512029501" class="text-white hover:text-purple-400 transition-colors font-medium">
                    (251) 202-9501
                </a>
            </div>
            
            {/* Navigation Links */}
            <div class="bg-gray-900/50 backdrop-blur-md px-6 py-2.5 rounded-full border border-gray-800/50">
                {frameworks.map((framework, index) => (
                    <>
                        {index !== 0 && <span class="mx-4 text-gray-600">|</span>}
                        <a
                            href={framework.path}
                            class:list={[
                                'relative px-3 py-1.5 text-sm transition-all duration-300 font-medium font-sans',
                                isActivePath(framework.path)
                                    ? 'text-white bg-gray-800/80 rounded-lg border border-gray-700/50 shadow-[0_0_15px_rgba(0,0,0,0.3)]'
                                    : 'text-gray-400 hover:text-white'
                            ]}
                        >
                            <span class="relative z-10">{framework.displayName}</span>
                            {isActivePath(framework.path) && (
                                <span 
                                    class="absolute bottom-0 left-0 h-[2px] w-full"
                                    style={`background-color: ${framework.color}`}
                                />
                            )}
                        </a>
                    </>
                ))}
            </div>

            {/* Contact Button */}
            <div class="flex justify-end">
                <a
                    href="#"
                    data-calendar-trigger
                    class="px-4 py-1.5 bg-purple-600 hover:bg-purple-700 text-white rounded-full transition-colors flex items-center gap-1.5 text-sm"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                        <line x1="16" y1="2" x2="16" y2="6"></line>
                        <line x1="8" y1="2" x2="8" y2="6"></line>
                        <line x1="3" y1="10" x2="21" y2="10"></line>
                    </svg>
                    Appointments
                </a>
            </div>
        </div>

        {/* Mobile Navigation */}
        <div class="lg:hidden flex justify-between items-center">
            <button
                id="mobile-menu-button"
                class="p-2 text-gray-400 hover:text-white"
                aria-label="Toggle Menu"
            >
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
                </svg>
            </button>

            <div 
                id="mobile-menu" 
                class="hidden fixed inset-0 bg-gray-900/95 backdrop-blur-md"
                style="z-index: 100;"
            >
                <div class="container mx-auto px-4 py-8">
                    <div class="flex justify-end">
                        <button
                            id="mobile-menu-close"
                            class="p-2 text-gray-400 hover:text-white"
                            aria-label="Close Menu"
                        >
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                    <nav class="mt-8 flex flex-col gap-4">
                        {frameworks.map(framework => (
                            <a
                                href={framework.path}
                                class:list={[
                                    'px-4 py-2 rounded-lg transition-all duration-200',
                                    isActivePath(framework.path)
                                        ? 'bg-gray-800 text-white'
                                        : 'text-gray-400 hover:text-white hover:bg-gray-800/50'
                                ]}
                            >
                                {framework.displayName}
                                {isActivePath(framework.path) && (
                                    <span 
                                        class="block h-[2px] mt-1 w-12"
                                        style={`background-color: ${framework.color}`}
                                    />
                                )}
                            </a>
                        ))}

                        <div class="mt-6 flex flex-col gap-4">
                            <a
                                href="#"
                                data-calendar-trigger
                                class="flex items-center gap-2 px-4 py-2 text-white bg-purple-600 hover:bg-purple-700 rounded-lg transition-all duration-200"
                            >
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                                    <line x1="16" y1="2" x2="16" y2="6"></line>
                                    <line x1="8" y1="2" x2="8" y2="6"></line>
                                    <line x1="3" y1="10" x2="21" y2="10"></line>
                                </svg>
                                Schedule Appointment
                            </a>
                        </div>
                    </nav>
                </div>
            </div>
        </div>
    </nav>
</header>

<script>
    function setupMobileMenu() {
        const button = document.getElementById('mobile-menu-button');
        const closeButton = document.getElementById('mobile-menu-close');
        const menu = document.getElementById('mobile-menu');
        const body = document.body;

        if (!button || !closeButton || !menu || !button.parentNode || !closeButton.parentNode) {
            console.warn('Mobile menu elements not found');
            return;
        }

        // Create new buttons with event listeners
        const newButton = button.cloneNode(true) as HTMLButtonElement;
        const newCloseButton = closeButton.cloneNode(true) as HTMLButtonElement;

        const toggleMenu = () => {
            menu.classList.toggle('hidden');
            body.style.overflow = menu.classList.contains('hidden') ? '' : 'hidden';
        };

        // Add event listeners to new buttons
        newButton.addEventListener('click', toggleMenu);
        newCloseButton.addEventListener('click', toggleMenu);

        // Replace old buttons with new ones
        button.parentNode.replaceChild(newButton, button);
        closeButton.parentNode.replaceChild(newCloseButton, closeButton);

        // Close menu when clicking outside
        const handleOutsideClick = (e: MouseEvent) => {
            const target = e.target as HTMLElement;
            if (target === menu) {
                toggleMenu();
            }
        };
        menu.addEventListener('click', handleOutsideClick);

        // Close menu on escape key
        const handleEscKey = (e: KeyboardEvent) => {
            if (e.key === 'Escape' && !menu.classList.contains('hidden')) {
                toggleMenu();
            }
        };
        document.addEventListener('keydown', handleEscKey);

        // Cleanup function
        return () => {
            menu.removeEventListener('click', handleOutsideClick);
            document.removeEventListener('keydown', handleEscKey);
        };
    }

    let cleanup: (() => void) | undefined;

    // Run setup immediately if document is already loaded
    if (document.readyState === 'complete') {
        cleanup = setupMobileMenu();
    } else {
        // Otherwise wait for DOMContentLoaded
        document.addEventListener('DOMContentLoaded', () => {
            cleanup = setupMobileMenu();
        });
    }
    
    // Setup after each navigation with View Transitions
    document.addEventListener('astro:page-load', () => {
        if (cleanup) {
            cleanup();
        }
        cleanup = setupMobileMenu();
    });
    
    // Cleanup when leaving page
    document.addEventListener('astro:before-swap', () => {
        if (cleanup) {
            cleanup();
        }
        const menu = document.getElementById('mobile-menu');
        const body = document.body;
        if (menu && !menu.classList.contains('hidden')) {
            menu.classList.add('hidden');
            body.style.overflow = '';
        }
    });
</script>